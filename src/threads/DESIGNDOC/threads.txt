            +--------------------+
            |        EE 415      |
            | PROJECT 1: THREADS |
            |   DESIGN DOCUMENT  |
            +--------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Joowon Han <cony717@kaist.ac.kr>
Seoyoung Hwang <hsyng@kaist.ac.kr>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

None.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

-- added to struct thread (thread.h) --
>> int64_t wakeup_tick: tick till wake up.

-- global/static variables (thread.c) --
>> static struct list sleep_list: List of processes in THREAD_BLOCKED
state.
>> static int global_tick: minimum value of local ticks of the threads.


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

A timer_sleep() call gets current timer tick, then calls thread_sleep()
function. This function blocks the current thread and inserts it to
sleep_list, storing 'when to wake it up' in wakeup_tick.
The timer interrupt handler increments the tick and calls the
thread_wakeup() function, which checks if enough time has elapsed for any
of the sleeping threads to wake up (i.e. unblocked). If so, the handler
unblocks the thread and removes it from sleep_list.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

Whenever a thread is blocked, the thread_sleep() function checks for the
minimum wakeup_tick value and stores it in the global_tick variable.
The timer interrupt handler does not iterate through the sleep_list every
time it is called, but compares the current tick with this global_tick
to check if any thread is to be awoken.


---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

timer_sleep() calls thread_sleep(), which immediately disables interrupts
with start of execution. timer_sleep() asserts that the current interrupt
level is INTR_ON, so a race would result in assertion failure.


>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

timer_sleep() calls thread_sleep(), which immediately disables interrupts
with start of execution. Any attempts to interrupt will be disabled until
thread_sleep() completes execution and enables interruptions again.


---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

We considered sorting the sleep_list with respect to wakeup_tick, so that
the front element would always be the first one to awake. However, this
design is not as fast as the current design because the timer interruption
handler would have to constantly peek at the first element of sleep_list;
this would be slower than the simple comparison between integers as in the
current design.


             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

-- added to struct thread (thread.h) --
>> int initial_priority: initial priority before priority donation.
>> struct list donations: list of donors.
>> struct list_elem d_elem: list element for donor list.
>> struct lock *wait_on_lock: ock that the thread waits for.


>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)
    1. In thread structure : struct lock *wait_on_lock  /*lock that it waits for*/
    2. In lock structure : struct thread *holder    /*hread holding lock*/
    <nested donation>
                              [holder] [wait_on_lock]
    +-----+        +-----+    +-------+             +------+
    | t9  |<--...--| t1  |<---|   t   |<----lock----| curr |
    +-----+        +-----+    +-------+             +------+
    curr = t, t = curr->wait_on_lock->holder = t1 
    +-----+        +-----+         +-------+
    | t9  |<--...--|  t  |<--lock'-| curr  |
    +-----+        +-----+         +-------+
    ...           

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?
    We sorted the list of waiters in order of priority.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?
    1. If lock is not available, store address of the lock.
    2. Store the current threads in donors list of lock holder.
    3. Donate priority.
    Nested donation is handled by iterating donation.
    Donate priority from donor to recipient, and then recipient becomes donors.
    It is limited to 10 levels of nested donation.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.
    1. Remove the thread that holds the lock on donation list.
    2. Set priority properly.
    3. Release the semaphore.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?



              ADVANCED SCHEDULER
              ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

-- added to struct thread (thread.h) --
>> int nice: Nice value.
>> int recent_cpu: recent cpu value.

-- global/static variables (thread.c) --
>> static int load_avg: load average.


---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0      0   0   0  63  61  59      A
 4      4   0   0  62  61  59      A
 8      8   0   0  61  61  59      B
12      8   4   0  61  60  59      A
16      12  4   0  60  60  59      B
20      12  8   0  60  59  59      A
24      16  8   0  59  59  59      C
28      16  8   4  59  59  58      B
32      16  12  4  59  58  58      A
36      20  12  4  58  58  58      C

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?